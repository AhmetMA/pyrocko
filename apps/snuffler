#!/usr/bin/env python

'''Effective MiniSEED trace viewer.'''

# Copyright (c) 2009, Sebastian Heimann <sebastian.heimann@zmaw.de>
#
# This file is part of snuffler. For licensing information please see the file 
# COPYING which is included with snuffler.

import os, sys, signal, logging
import numpy as num
from optparse import OptionParser

import pyrocko.pile
import pyrocko.util
import pyrocko.pile_viewer

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class MySnuffler(QApplication):
    
    def __init__(self, *args):
        apply(QApplication.__init__, (self,) + args)
        
        parser = OptionParser()
        parser.add_option('--pattern', dest='pattern')
        parser.add_option('--ntracks', dest='ntracks', default=24)
        parser.add_option('--format', dest='format', default='from_extension', 
                          choices=('mseed', 'sac', 'kan', 'segy', 'from_extension', 'try'))
        parser.add_option('--debug', dest='debug', action='store_true', default=False)
        parser.add_option('--opengl', dest='opengl', action='store_true', default=False)
        
        options, args = parser.parse_args(list(args[0][1:]))
        
        if options.debug:
            pyrocko.util.setup_logging('snuffler', 'debug')
        else:
            pyrocko.util.setup_logging('snuffler', 'warning')
        
        filenames = pyrocko.util.select_files( args, regex=options.pattern )
        cachedirname = '/tmp/snuffle_cache_%s' % os.environ['USER']
        if options.pattern:
            cache = None
        else:
            cache = pyrocko.pile.get_cache(cachedirname)
            
        pile = pyrocko.pile.Pile()
        pile.add_files( sorted(filenames), cache=cache, 
                        filename_attributes=options.pattern,
                        fileformat=options.format )

        self.pile_viewer = pyrocko.pile_viewer.PileViewer(
            pile, ntracks_shown_max=options.ntracks, use_opengl=options.opengl)
        
        if os.path.isfile('markers'):
            markers = num.sort(num.loadtxt('markers'), axis=0)
            self.pile_overview.set_markers( markers )
        
        self.win = QMainWindow()
        self.win.setWindowTitle( "Snuffler" )        
        self.win.setCentralWidget( self.pile_viewer )
        self.win.show()

        sb = self.win.statusBar()
        sb.clearMessage()
        sb.showMessage('Welcome to Snuffler! Click and drag to zoom and pan. Doubleclick to pick. Right-click for Menu. <space> to step forward. <b> to step backward. <q> to close.')

        self.connect(self, SIGNAL("lastWindowClosed()"), self.myquit)
        signal.signal(signal.SIGINT, self.myquit)

    def myquit(self, *args):
        self.quit()
    
def main(args):
    
    app = MySnuffler(args)
    app.exec_()
    
    if pyrocko.pile_viewer.Global.sacflag: pyrocko.pile_viewer.sac_exec()
    sys.exit()

if __name__=="__main__":
    main(sys.argv)
