#!/usr/bin/env python

'''Effective seismological trace viewer.'''

import os, sys, signal, logging, time, re, struct, base64
import numpy as num
import cPickle as pickle
from optparse import OptionParser

import pyrocko.pile
import pyrocko.hamster_pile
import pyrocko.slink
import pyrocko.serial_hamster
import pyrocko.util
import pyrocko.pile_viewer
import pyrocko.ipc
import pyrocko.model

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtNetwork import *

logger = logging.getLogger('pyrocko.snuffler')

class AcquisitionThread(QThread):
    def __init__(self, post_process_sleep=0.0):
        QThread.__init__(self)
        self.mutex = QMutex()
        self.queue = []
        self.post_process_sleep = post_process_sleep
        self._sun_is_shining = True
    
    def run(self):
        while True:
            try:
                self.acquisition_start()
                while self._sun_is_shining:
                    t0 = time.time()
                    self.process()
                    t1 = time.time()
                    if self.post_process_sleep != 0.0:
                        time.sleep(max(0, self.post_process_sleep-(t1-t0)))
            
                self.acquisition_stop()
                break
            
            except (pyrocko.serial_hamster.SerialHamsterError, pyrocko.slink.SlowSlinkError), e:
                logger.error(str(e))
                logger.error('Acquistion terminated, restart in 5 s')
                self.acquisition_stop()
                time.sleep(5)
                if not self._sun_is_shining:
                    break
            
    def stop(self):
        self._sun_is_shining = False

        logger.debug("Waiting for thread to terminate...")
        self.wait()
        logger.debug("Thread has terminated.")
 
    def got_trace(self, tr):
        self.mutex.lock()
        self.queue.append(tr)
        self.mutex.unlock()
    
    def poll(self):
        self.mutex.lock()
        items = self.queue[:]
        self.queue[:] = []
        self.mutex.unlock()
        return items

class SlinkAcquisition(pyrocko.slink.SlowSlink, AcquisitionThread):
    def __init__(self, *args, **kwargs):
        pyrocko.slink.SlowSlink.__init__(self, *args, **kwargs)
        AcquisitionThread.__init__(self)

    def got_trace(self, tr):
        AcquisitionThread.got_trace(self,tr)

class CamAcquisition(pyrocko.serial_hamster.CamSerialHamster, AcquisitionThread):
    def __init__(self, *args, **kwargs):
        pyrocko.serial_hamster.CamSerialHamster.__init__(self, *args, **kwargs)
        AcquisitionThread.__init__(self, post_process_sleep=0.1)

    def got_trace(self, tr):
        AcquisitionThread.got_trace(self,tr)

class USBHB628Acquisition(pyrocko.serial_hamster.USBHB628Hamster, AcquisitionThread):
    def __init__(self, deltat=0.02, *args, **kwargs):
        pyrocko.serial_hamster.USBHB628Hamster.__init__(self, deltat=deltat, *args, **kwargs)
        AcquisitionThread.__init__(self)

    def got_trace(self, tr):
        AcquisitionThread.got_trace(self,tr)


class SchoolSeismometerAcquisition(pyrocko.serial_hamster.SerialHamster, AcquisitionThread):
    def __init__(self, *args, **kwargs):
        pyrocko.serial_hamster.SerialHamster.__init__(self, *args, **kwargs)
        AcquisitionThread.__init__(self, post_process_sleep=0.1)

    def got_trace(self, tr):
        AcquisitionThread.got_trace(self,tr)
      
class ProgressiveLoader(QThread):
    
    def __init__(self, loader):
        QThread.__init__(self)
        self._loader = loader
        self._mutex = QMutex()
        self._queue = []
        self._done = False
        
    def run(self):
        for tfile in self._loader:
            self._mutex.lock()
            self._queue.append(tfile)
            self._mutex.unlock()
        
        self._mutex.lock()
        self._done = True
        self._mutex.unlock()
    
    def poll(self):
        self._mutex.lock()
        tfiles = self._queue[:]
        self._queue[:] = []
        self._mutex.unlock()
        return tfiles
    
    def done(self):
        self._mutex.lock()
        done = self._done
        self._mutex.unlock()
        return done

    def __iter__(self):
        while True:
            tfiles = self.poll()
            if not tfiles:
                if self.done():
                    return
            yield tfiles
     

import asyncore, asynchat, socket, struct

class Channel(asynchat.async_chat):

    def __init__(self, sock=None, port=None):
        if sock is not None:
            asynchat.async_chat.__init__(self, sock)
        else:
            asynchat.async_chat.__init__(self)
            self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
            self.connect( ('', port) )

        self.ibuffer = []
        self.set_terminator(8)
        self.reading_size = True

    def handle_connect(self):
        pass
    
    def collect_incoming_data(self, data):
        self.ibuffer.append(data)

    def found_terminator(self):
        if self.reading_size:
            size = struct.unpack('>Q', ''.join(self.ibuffer))[0]
            self.set_terminator(size)
            self.reading_size = False
        else:
            data = ''.join(self.ibuffer)
            payload = pickle.loads(data)
            if payload is None:
                self.close_when_done()
                self.set_terminator(None)
            else:
                self.handle_object(payload)
                self.set_terminator(8)
                self.reading_size = True
        
        self.ibuffer = []

    def push_object(self, obj):
        data = pickle.dumps(obj)
        sdata = struct.pack('>Q', len(data))
        self.push(sdata)
        self.push(data)

    def handle_object(self, obj):
        print 'received:', obj
        self.push_object('hi')
        self.push_object(None)


class Connection(QObject):
    def __init__(self, parent, sock):
        QObject.__init__(self, parent)
        self.socket = sock
        self.connect(sock, SIGNAL('readyRead()'), self.handle_read)
        self.connect(sock, SIGNAL('disconnected()'), self.handle_disconnected)
        self.nwanted = 8
        self.reading_size = True

    def handle_read(self):
        while True:
            navail = self.socket.bytesAvailable()
            if navail < self.nwanted:
                return

            data = self.socket.read(self.nwanted)
            if self.reading_size:
                self.nwanted = struct.unpack('>Q', data)[0]
                self.reading_size = False
            else:
                obj = pickle.loads(data)
                if obj is None:
                    self.socket.disconnectFromHost()
                else:
                    self.handle_object(obj)
                self.nwanted = 8
                self.reading_size = True

    def handle_object(self, obj):
        self.emit(SIGNAL('received(PyQt_PyObject,PyQt_PyObject)'), self, obj)

    def push_object(self, obj):
        data = pickle.dumps(obj)
        self.socket.write(struct.pack('>Q', len(data)))
        self.socket.write(data)

    def handle_disconnected(self):
        self.emit(SIGNAL('disconnected(PyQt_PyObject)'), self)

    def close(self):
        self.socket.close()

class MyMainWindow(QMainWindow):

    def __init__(self, app, *args):
        QMainWindow.__init__(self, *args)
        self.app = app

    def keyPressEvent(self, ev):
        self.app.pile_viewer.get_view().keyPressEvent(ev)


class MySnuffler(QApplication):
    
    def __init__(self, args, forker):
        QApplication.__init__(self, [])
        
        self.dockwidget_to_toggler = {}

        usage = '''usage: %prog [options] waveforms ...'''
        
        parser = OptionParser(usage=usage)
        parser.add_option('--format', dest='format', default='from_extension',
                choices=('mseed', 'sac', 'kan', 'segy', 'seisan', 'seisan_l', 'seisan_b', 'from_extension', 'try'),
                help='assume files are of given FORMAT [default: \'%default\']' )
        parser.add_option('--pattern', dest='pattern', metavar='REGEX',
                help='only include files whose paths match REGEX')
        parser.add_option('--stations', dest='station_fns', action='append', default=[], metavar='STATIONS',
                help='read station information from file STATIONS')
        parser.add_option('--event', '--events', dest='event_fns', action='append', default=[], metavar='EVENT',
                help='read event information from file EVENT')
        parser.add_option('--markers', dest='marker_fns', action='append', default=[], metavar='MARKERS',
                help='read marker information file MARKERS')
        parser.add_option('--follow', dest='follow', metavar='N',
                help='follow real time with a window of N seconds')
        parser.add_option('--progressive', dest='progressive', action='store_true', default=False,
                help='don\'t wait for file scanning to complete before opening the viewer')
        parser.add_option('--force-cache', dest='force_cache', action='store_true', default=False,
                help='use the cache even when trace attribute spoofing is active (may have silly consequences)')
        parser.add_option('--ntracks', dest='ntracks', default=24, metavar='N',
                help='initially use N waveform tracks in viewer [default: %default]')
        parser.add_option('--opengl', dest='opengl', action='store_true', default=False,
                help='use OpenGL for drawing')
        parser.add_option('--debug', dest='debug', action='store_true', default=False,
                help='print debugging information to stderr')
        
        options, args = parser.parse_args(list(args[1:]))
        
        if options.debug:
            pyrocko.util.setup_logging('snuffler', 'debug')
        else:
            pyrocko.util.setup_logging('snuffler', 'warning')
       
        self._sources = []
        rargs = []
        for arg in args:
            msl = re.match(r'seedlink://([a-zA-Z0-9.-]+)(:(\d+))?(/(.*))?', arg)
            mca = re.match(r'cam://([^:]+)', arg)
            mus = re.match(r'hb628://([^:?]+)(\?(\d+))?', arg)
            msc = re.match(r'school://([^:]+)', arg)
            if msl:
                host = msl.group(1)
                port = msl.group(3)
                if not port:
                    port = '18000'
                stream_patterns = msl.group(5).split(',')
                sl = SlinkAcquisition(host=host, port=port)
                try:
                    streams = sl.query_streams()
                except pyrocko.slink.SlowSlinkError, e:
                    logger.fatal(str(e))
                    sys.exit(1)

                streams = pyrocko.util.match_nslcs(stream_patterns, streams)
                for stream in streams:
                    sl.add_stream(*stream)
                    
                self._sources.append(sl)
            elif mca:
                port = mca.group(1)
                cam = CamAcquisition(port=port, deltat=0.0314504)
                self._sources.append(cam)
            elif mus:
                port = mus.group(1)
                if mus.group(3):
                    deltat = 1./float(mus.group(3))
                else:
                    deltat = 0.02
                hb628 = USBHB628Acquisition(port=port, deltat=deltat, buffersize=16, lookback=50)
                self._sources.append(hb628)
            elif msc:
                port = msc.group(1)
                sco = SchoolSeismometerAcquisition(port=port)
                self._sources.append(sco)
                
            else:
                rargs.append(arg)
        
        filenames = []
        if rargs:
            filenames = pyrocko.util.select_files( rargs, regex=options.pattern )
        
        cachedirname = '/tmp/snuffle_cache_%s' % os.environ['USER']
        if options.pattern and not options.force_cache:
            cache = None
        else:
            cache = pyrocko.pile.get_cache(cachedirname)
            
        if self._sources:
            pile = pyrocko.hamster_pile.HamsterPile()        
            pile.set_fixation_length(60.*60.)
            #pile.set_save_path('test_snuffslink_traces')
        else:
            pile = pyrocko.pile.Pile()
        
        self._loader = None
        if filenames:
            if not options.progressive:
                pile.load_files( sorted(filenames), 
                            cache=cache, 
                            filename_attributes=options.pattern,
                            fileformat=options.format )
            else:
                l = pyrocko.pile.loader(sorted(filenames), 
                            fileformat=options.format, 
                            cache=cache, 
                            filename_attributes=options.pattern)
                    
                self._loader = ProgressiveLoader(l)
            
        
        self._win = MyMainWindow(self)
        self._win.setWindowTitle( "Snuffler" )        

        self.pile_viewer = pyrocko.pile_viewer.PileViewer(
            pile, ntracks_shown_max=options.ntracks, use_opengl=options.opengl, panel_parent=self)
        
        for stations_fn in options.station_fns:
            stations = pyrocko.model.load_stations(stations_fn)
            self.pile_viewer.get_view().add_stations(stations)
        
        first = True
        for event_fn in options.event_fns:
            for ev in pyrocko.model.Event.load_catalog(event_fn):
                self.pile_viewer.get_view().add_event(ev)
                if first:
                    self.pile_viewer.get_view().set_origin(ev)
                    first = False

        for marker_fn in options.marker_fns:
            self.pile_viewer.get_view().add_markers(pyrocko.pile_viewer.Marker.load_markers(marker_fn))

        self._win.setCentralWidget( self.pile_viewer )
        
        self.pile_viewer.setup_snufflings()

        self.add_panel('Main Controls', self.pile_viewer.controls(), visible=True)
        self._win.resize(1024, 768)       
        self._win.show()

        self.pile_viewer.get_view().setFocus(Qt.OtherFocusReason)

        sb = self._win.statusBar()
        sb.clearMessage()
        sb.showMessage('Welcome to Snuffler! Click and drag to zoom and pan. Doubleclick to pick. Right-click for Menu. <space> to step forward. <b> to step backward. <q> to close.')

        self.connect(self, SIGNAL("lastWindowClosed()"), self.myquit)
        signal.signal(signal.SIGINT, self.myquit)
        
        if self._loader:
            self._loader.start()
            self._loader_iterator = iter(self._loader)
            
        for source in self._sources:
            source.start()

        if self._loader or self._sources:
            self._timer = QTimer( self )
            self.connect( self._timer, SIGNAL("timeout()"), self.periodical ) 
            self._timer.setInterval(500)
            self._timer.start()
            
        if options.follow:
            self.pile_viewer.get_view().follow(float(options.follow))

        self.forker = forker
        self.start_server()
        self.start_loader()
   
    def start_server(self):
        self.connections = []
        s = QTcpServer(self)
        s.listen(QHostAddress.LocalHost)
        self.connect(s, SIGNAL('newConnection()'), self.handle_accept)
        self.server = s

    def start_loader(self):
        self.forker.spawn('loader', self.server.serverPort())

    def handle_accept(self):
        sock = self.server.nextPendingConnection()
        con = Connection(self, sock)
        self.connections.append(con)
        self.connect(con, SIGNAL('disconnected(PyQt_PyObject)'), self.handle_disconnected) 
        self.connect(con, SIGNAL('received(PyQt_PyObject,PyQt_PyObject)'), self.handle_received)
        
        con.push_object(('load', ['/Users/tofu/Desktop/testdata'], 'from_extension', None, None))

    def handle_disconnected(self, connection):
        self.connections.remove(connection)
        connection.close()
        del connection

    def handle_received(self, connection, object):
        p = self.pile_viewer.get_pile()
        files = object
        p.add_files(files)
        self.pile_viewer.update_contents()

    def testfork(self):
        pass
    
    def periodical(self):
        p = self.pile_viewer.get_pile()
        update = False
        try:
            if self._loader:
                files = self._loader_iterator.next()
                if files:
                    p.add_files(files)
                    update = True
                    
        except StopIteration:
            if not self._sources:
                self._timer.stop()
                
        for source in self._sources:
            traces = source.poll()
            for tr in traces:
                p.insert_trace(tr)
            if traces:
                update = True
        
        if update:
            self.pile_viewer.update_contents()

    def dockwidgets(self):
        return [ w for w in self._win.findChildren(QDockWidget) if not w.isFloating() ]

    def get_panel_parent_widget(self):
        return self._win

    def add_panel(self, name, panel, visible=False):
        dws = self.dockwidgets()
        dockwidget = QDockWidget(name, self._win)
        dockwidget.setWidget(panel)
        panel.setParent(dockwidget)
        self._win.addDockWidget(Qt.BottomDockWidgetArea, dockwidget)

        if dws:
            self._win.tabifyDockWidget(dws[-1], dockwidget)
        
        self.toggle_panel(dockwidget, visible)

        mitem = QAction(name, None)
        
        def toggle_panel(checked):
            self.toggle_panel(dockwidget, True)

        self.connect( mitem, SIGNAL('triggered(bool)'), toggle_panel)
        self.pile_viewer.get_view().add_panel_toggler(mitem)

        self.dockwidget_to_toggler[dockwidget] = mitem


    def toggle_panel(self, dockwidget, visible):
        dockwidget.setVisible(visible)
        if visible:
            dockwidget.setFocus()
            dockwidget.raise_()

    def remove_panel(self, panel):
        dockwidget = panel.parent()
        self._win.removeDockWidget(dockwidget)
        dockwidget.setParent(None)
        mitem = self.dockwidget_to_toggler[dockwidget]
        self.pile_viewer.get_view().remove_panel_toggler(mitem)
        
    def myquit(self, *args):
        for source in self._sources:
            source.stop()
        
        p = self.pile_viewer.get_pile()
        if hasattr(p, 'fixate_all'):
            self.pile_viewer.get_pile().fixate_all()
        self.quit()

class FileLoader(Channel):
    def __init__(self, port):
        Channel.__init__(self, port=port)
        self.loader = None
    
    def handle_object(self, obj):
        if obj[0] == 'load':
            pathes, format, cache, pattern = obj[1:]
            filenames = pyrocko.util.select_files( pathes )
            self.loader = pyrocko.pile.loader(sorted(filenames), 
                                fileformat=format, 
                                cache=cache, 
                                filename_attributes=pattern)

    def run(self):

        while True:
            if self.loader is not None:
                timeout = 0.
            else:
                timeout = 30.

            asyncore.loop(timeout=timeout, count=1)
            
            if self.loader:
                try:
                    tfile = self.loader.next()
                    self.push_object([tfile])
                except StopIteration:
                    self.push_object(None)
                    self.loader = None

class Forker:

    subsystems = {
            'loader': FileLoader
    }

    def __init__(self):
        
        from_parent, to_child = os.pipe() 
        pid = os.fork()
        if pid == 0:
            os.close(to_child)
            self.from_parent = os.fdopen(from_parent, 'r')
            self.run()
            self.from_parent.close()
            sys.exit()
        else:
            os.close(from_parent)
            self.to_child = os.fdopen(to_child, 'w')
    
    def spawn(self, subsystem, *args):
        data = pickle.dumps((subsystem,)+args)
        line = base64.b64encode(data)
        self.to_child.write(line)
        self.to_child.write('\n')
        self.to_child.flush()

    def run(self):
        while True:
            line = self.from_parent.readline()
            if not line:
                return
            data = base64.b64decode(line.strip())
            toks = pickle.loads(data)
            subsystem = toks[0]
            args = toks[1:]
            pid = os.fork()
            if pid == 0:
                self.from_parent.close()
                cls = Forker.subsystems[subsystem]
                s = cls(*args)
                s.run()
                sys.exit()
    
    def close(self):
        self.to_child.close()

def main(args):
    forker = Forker()    
    app = MySnuffler(args, forker)
    app.exec_()
    forker.close()


if __name__=="__main__":
    main(sys.argv)


