#!/usr/bin/env python

import sys
import numpy as num
from pyrocko import cake, util
from pyrocko import cake_plot as plot
from optparse import OptionParser, OptionGroup

r2d = cake.r2d

class Anon(dict):
    
    def __getattr__(self, x):
        return self[x]

    def getn(self, *keys):
        return Anon( [(k, self[k]) for k in keys] )

    def gett(self, *keys):
        return tuple([ self[k] for k in keys])

def optparse(required=(), optional=(), args=sys.argv, usage='%prog [options]', descr=None):
    
    want = required + optional

    parser = OptionParser(prog='cake', 
            usage=usage, 
            description=descr.capitalize()+'.', 
            add_help_option=False,
            formatter=util.BetterHelpFormatter())

    parser.add_option('-h', '--help', action='help', help='Show help message and exit.')

    if 'phases' in want:
        group = OptionGroup(parser, 'Phases', '''

Seismic phase arrivals may be either specified as traditional phase names (e.g.
P, S, PP, PcP, ...) or in Cake's own syntax which is more powerful.  Use the
--classic option, for traditional phase names. Use the --phase option if you
want to define phases in Cake's syntax.

''')
        group.add_option('--phase', '--phases', dest='phases', action="append",
                default=[], metavar='PHASE1,PHASE2,...',
                help='''Comma separated list of seismic phases in Cake\'s syntax.

The definition of a seismic propagation path in Cake's phase syntax is a string
consisting of an alternating sequence of "legs" and "knees".

A "leg" represents seismic wave propagation without any conversions,
encountering only super-critical reflections. Legs are denoted by "P", "p",
"S", or "s". The capital letters are used when the take-off of the "leg" is
in downward direction, while the lower case letters indicate a take-off in
upward direction. 

A "knee" is an interaction with an interface. It can be a mode conversion, a
reflection, or propagation as a headwave or diffracted wave.
   
   * conversion is simply denoted as: "(INTERFACE)" or "DEPTH"
   * upperside reflection: "v(INTERFACE)" or "vDEPTH"
   * underside reflection: "^(INTERFACE)" or "^DEPTH"
   * normal kind headwave or diffracted wave: "v_(INTERFACE)" or "v_DEPTH"

The interface may be given by name or by depth: INTERFACE is the name of an
interface defined in the model, DEPTH is the depth of an interface in [km] (the
interface closest to that depth is chosen).  If two legs appear consecutively
without an explicit "knee", surface interaction is assumed.

The preferred standard interface names in cake are "conrad", "moho", "ocb"
(outer core boundary), and "cb" (inner core boundary).

The phase definition may end with a backslash "\\", to indicate that the ray
should arrive at the receiver from above instead of from below. It is possible
to restrict the maximum and minimum depth of a "leg" by appending
"<(INTERFACE)" or "<DEPTH" or ">(INTERFACE)" or ">DEPTH" after the leg
character, respectively.  ''')

        group.add_option('--classic', dest='classic_phases', action='append',
                default=[], metavar='PHASE1,PHASE2,...',
                help='Comma separated list of seismic phases in classic nomenclature. '
                     'Run "cake list-phase-map" for a list of available phase names.')

        parser.add_option_group(group)

    if 'model' in want:
        group = OptionGroup(parser, 'Model')
        group.add_option('--model', dest='model_filename', metavar='(NAME or FILENAME)', 
                help='Use builtin model named NAME or user model from file FILENAME. '
                     'Run "cake list-models" for a list of builtin models.')
        group.add_option('--format', dest='model_format', metavar='FORMAT', choices=['nd', 'hyposat'], default='nd',
                help='Set model file format (available: nd, hyposat; default: nd).')
        group.add_option('--crust2loc', dest='crust2loc', metavar='LAT,LON',
                help='Set model from CRUST2.0 profile at location (LAT,LON).')

        if 'accuracy' in want:
            group.add_option('--accuracy', dest='accuracy', type='float', metavar='MAXIMUM_RELATIVE_RMS', default=0.002,
                    help='Set accuracy for model simplification.')

        parser.add_option_group(group)
    
    if any( x in want for x in ('zstart', 'zstop', 'distances', 'as_degrees') ):
        group = OptionGroup(parser, 'Source-receiver geometry')
        if 'zstart' in want:
            group.add_option('--sdepth', dest='sdepth', type='float', default=0.0, metavar='FLOAT',
                    help='Source depth [km] (default: 0)')
        if 'zstop' in want:
            group.add_option('--rdepth', dest='rdepth', type='float', default=0.0, metavar='FLOAT',
                    help='Receiver depth [km] (default: 0)')
        if 'distances' in want:
            group.add_option('--distances', dest='sdist', metavar='DISTANCES',
                    help='Surface distances as "start:stop:n" or "dist1,dist2,..." [km]')
        if 'as_degrees' in want:
            group.add_option('--degrees', dest='as_degrees', action='store_true', default=False,
                    help='Distances are in [deg] instead of [km], velocities in [deg/s] instead of [km/s].')
        parser.add_option_group(group)
        
    if 'vred' in want:
        group = OptionGroup(parser, 'Plotting options')
        group.add_option('--vred', dest='vred', type='float', metavar='FLOAT',
                help='Velocity for time reduction in plot [km/s]')
        parser.add_option_group(group)

    if 'material' in want:
        group = OptionGroup(parser, 'Material', 
                'An isotropic elastic material may be specified by giving '
                'a combination of some of the following options. ')
        group.add_option('--vp', dest='vp', default=None, type='float', metavar='FLOAT',
                help='P-wave velocity [km/s]')
        group.add_option('--vs', dest='vs', default=None, type='float', metavar='FLOAT',
                help='S-wave velocity [km/s]')
        group.add_option('--rho', dest='rho', default=None, type='float', metavar='FLOAT',
                help='density [g/cm**3]')
        group.add_option('--qp', dest='qp', default=None, type='float', metavar='FLOAT',
                help='P-wave attenuation Qp (default: 1456)')
        group.add_option('--qs', dest='qs', default=None, type='float', metavar='FLOAT',
                help='S-wave attenuation Qs (default: 600)')
        group.add_option('--poisson', dest='poisson', default=None, type='float', metavar='FLOAT',
                help='Poisson ratio')
        group.add_option('--lambda', dest='lame_lambda', default=None, type='float', metavar='FLOAT',
                help='Lame parameter lambda [GPa]')
        group.add_option('--mu', dest='lame_mu', default=None, type='float', metavar='FLOAT',
                help='Shear modulus [GPa]')
        group.add_option('--qk', dest='qk', default=None, type='float', metavar='FLOAT',
                help='Bulk attenuation Qk')
        group.add_option('--qmu', dest='qmu', default=None, type='float', metavar='FLOAT',
                help='Shear attenuation Qmu')
        parser.add_option_group(group)

    if usage == 'cake help-options':
        parser.print_help()

    (options, args) = parser.parse_args(args)
    
    if len(args) != 2:
        parser.error('Cake arguments should look like "--option" or "--option=...".')

    d = {}
    as_degrees = False
    if 'as_degrees' in want:
        as_degrees = options.as_degrees
        d['as_degrees'] = as_degrees
    
    if 'accuracy' in want:
        d['accuracy'] = options.accuracy

    if 'phases' in want:
        phases = []
        try:
            for ss in options.phases:
                for s in ss.split(','):
                    phases.append(cake.PhaseDef(s))

            for pp in options.classic_phases:
                for p in pp.split(','):
                        phases.extend( cake.PhaseDef.classic(p) )

        except (cake.PhaseDefParseError, cake.UnknownClassicPhase), e:
            parser.error(e)
        
        if phases:
            d['phases'] = phases 
  
    if 'model' in want:
        if options.model_filename:
            d['model'] = cake.load_model(options.model_filename, options.model_format)

        if options.crust2loc:
            try:
                lat,lon = [ float(x) for x in options.crust2loc.split(',') ]
            except:
                parser.error('format for --crust2loc option is "LATITUDE,LONGITUDE"')
                
            from pyrocko import crust2x2
            profile = crust2x2.get_profile(lat,lon)
            d['model'] = cake.LayeredModel.from_scanlines(cake.from_crust2x2_profile(profile))

    if 'vred' in want:
        d['vred'] = options.vred
        if d['vred'] is not None: 
            if not as_degrees:
                d['vred'] *= r2d * cake.km / cake.earthradius

    if 'distances' in want:
        distances = None
        if options.sdist:
            if options.sdist.find(':') != -1:
                ssn = options.sdist.split(':')
                if len(ssn) != 3:
                    parser.error('format for distances is "min_distance:max_distance:n_distances"')

                distances = num.linspace(*map(float, ssn))
            else:
                distances = num.array(map(float, options.sdist.split(',')), dtype=num.float)
        
            if not as_degrees:
                distances *= r2d * cake.km / cake.earthradius
        
        if distances is not None:
            d['distances'] = distances
        else:
            if 'distances' not in required:
                d['distances'] = None
    
    if 'zstart' in want:
        d['zstart'] = options.sdepth*cake.km

    if 'zstop' in want:
        d['zstop'] = options.rdepth*cake.km
    
    if 'material' in want:
        md = {}
        userfactor = dict(vp=1000., vs=1000., rho=1000., qp=1., qs=1., lame_lambda=1.0e9, lame_mu=1.0e9, poisson=1.)
        for k in userfactor.keys():
            if getattr(options, k) is not None:
                md[k] = getattr(options, k) * userfactor[k]
            
        if not (bool('lame_lambda' in md) == bool('lame_mu' in md)):
            parser.error('lambda and mu must be specified both.')
        if 'lame_lambda' in md and 'lame_mu' in md:
            md['lame'] = md.pop('lame_lambda'), md.pop('lame_mu')

        if md:
            try:
                d['material'] = cake.Material(**md)
            except cake.InvalidArguments, e:
                parser.error(str(e))

    for k in d.keys():
        if k not in want:
            del d[k]

    for k in required:
        if k not in d:
            if k == 'model':
                d['model'] = cake.load_model('ak135-f-continental.m')

            elif k == 'distances':
                d['distances'] = num.linspace(10*cake.km, 100*cake.km, 10) / cake.earthradius * r2d
            
            elif k == 'phases':
                d['phases'] = map(cake.PhaseDef, 'Pp')

            else:
                parser.error('missing %s' % k)

    return Anon(d)

def my_simplify_model(mod, accuracy):
    mod_simple = mod.simplify(max_rel_error=accuracy)
    cake.write_nd_model_fh(mod_simple, sys.stdout)

def d2u(d):
    return dict((k.replace('-','_'), v) for (k,v) in d.iteritems())

if __name__ == '__main__':

    subcommand_descriptions = {
            'print':          'get information on model/phase/material properties',
            'arrivals':       'print list of phase arrivals',
            'paths':          'print ray path details',
            'plot-xt':        'plot traveltime vs distance curves',
            'plot-xp':        'plot ray parameter vs distance curves',
            'plot-rays':      'plot ray propagation paths',
            'plot':           'plot combination of ray and traveltime curves',
            'plot-model':     'plot velocity model',
            'list-models':    'list builtin velocity models',
            'list-phase-map': 'show translation table for classic phase names',
            'simplify-model': 'create a simplified version of a layered model'}

    usage = '''cake <subcommand> [options] 

Subcommands:

    print          %(print)s
    arrivals       %(arrivals)s
    paths          %(paths)s
    plot-xt        %(plot_xt)s
    plot-xp        %(plot_xp)s
    plot-rays      %(plot_rays)s
    plot           %(plot)s
    plot-model     %(plot_model)s
    list-models    %(list_models)s
    list-phase-map %(list_phase_map)s
    simplify-model %(simplify_model)s

To get further help and a list of available options for any subcommand run:

    cake <subcommand> --help

'''.strip() % d2u(subcommand_descriptions)

    usage_sub = 'cake %s [options]'
    if len(sys.argv) < 2:
        sys.exit('Usage: %s' % usage)

    command = sys.argv[1]
    descr = subcommand_descriptions.get(command, None)
    subusage = usage_sub % command

    if command == 'print':
        c = optparse((), ('model', 'phases', 'material'), usage=subusage, descr=descr)
        
        if 'model' in c:
            print c.model
            print 
     
        if 'phases' in c:
            for phase in c.phases:
                print phase
            print

        if 'material' in c:
            print c.material.describe()
            print
       
    elif command == 'arrivals':
        c = optparse(('model', 'phases', 'distances'), ('zstart', 'zstop', 'as_degrees'), usage=subusage, descr=descr) 
        mod = c.model
        for arrival in mod.arrivals(**c.getn('zstart', 'zstop', 'phases', 'distances')):
            print arrival.__str__(as_degrees=c.as_degrees)

    elif command == 'paths':
        c = optparse(('model', 'phases'), ('zstart', 'zstop', 'as_degrees'), usage=subusage, descr=descr) 
        mod = c.model
        for path in mod.gather_paths(**c.getn('phases', 'zstart', 'zstop')):
            print path.describe(path.endgaps(c.zstart, c.zstop), c.as_degrees)

    elif command in ('plot-xt', 'plot-xp', 'plot-rays', 'plot'):
        if command in ('plot-xt', 'plot'):
            c = optparse(('model', 'phases'), ('zstart', 'zstop', 'distances', 'as_degrees', 'vred'), usage=subusage, descr=descr) 
        else:
            c = optparse(('model', 'phases'), ('zstart', 'zstop', 'distances', 'as_degrees'), usage=subusage, descr=descr) 

        mod = c.model
        paths = mod.gather_paths(**c.getn('phases', 'zstart', 'zstop'))
        
        if c.distances is not None:
            arrivals = mod.arrivals( **c.getn('phases', 'zstart', 'zstop', 'distances'))
        else:
            arrivals = None
        
        if command == 'plot-xp':
            plot.my_xp_plot(paths, c.zstart, c.zstop, c.distances, c.as_degrees)
        elif command == 'plot-xt':
            plot.my_xt_plot(paths, c.zstart, c.zstop, c.distances, c.as_degrees, vred=c.vred)
        elif command == 'plot-rays':
            if c.as_degrees:
                plot.my_rays_plot_gcs(mod, paths, arrivals, c.zstart, c.zstop, c.distances)
            else:
                plot.my_rays_plot(mod, paths, arrivals, c.zstart, c.zstop, c.distances)

        elif command == 'plot':
            plot.my_combi_plot(mod, paths, arrivals, c.zstart, c.zstop, c.distances, c.as_degrees, vred=c.vred)


    elif command in ('plot-model',):
        c = optparse(('model',), (), usage=subusage, descr=descr) 
        mod = c.model
        plot.my_model_plot(mod)

    elif command in ('simplify-model',):
        c = optparse(('model',), ('accuracy',), usage=subusage, descr=descr) 
        my_simplify_model(c.model, c.accuracy)

    elif command in ('list-models',):
        for x in cake.builtin_models():
            print x

    elif command in ('list-phase-map',):
        defs = cake.PhaseDef.classic_definitions()
        for k in sorted(defs.keys()):
            print '%-15s: %s' % (k, ', '.join(defs[k]))

    elif command in ('help-options',):
        optparse((), ('model', 'phases', 'distances', 'zstart', 'zstop', 
                      'distances', 'as_degrees',  'material', 'vred'),
                      usage='cake help-options', descr='list all available options')


    elif command in ('--help', '-h', 'help'):
        sys.exit('Usage: %s' % usage)

    else:
        sys.exit('cake: no such subcommand: %s' % command)

